// Code generated by go-bindata.
// sources:
// assets/apiserver-haproxy/apiserver-ip.service
// assets/apiserver-haproxy/haproxy.cfg
// assets/apiserver-haproxy/kube-apiserver-proxy.yaml
// assets/apiserver-haproxy/setup-apiserver-ip.sh
// assets/apiserver-haproxy/teardown-apiserver-ip.sh
// assets/cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml
// assets/cluster-bootstrap/namespace-security-allocation-controller-clusterrole.yaml
// assets/cluster-bootstrap/namespace-security-allocation-controller-clusterrolebinding.yaml
// assets/common/service-network-admin-kubeconfig-secret.yaml
// assets/control-plane-operator/cp-operator-configmap.yaml
// assets/etcd/etcd-cluster-crd.yaml
// assets/etcd/etcd-cluster.yaml
// assets/etcd/etcd-operator-cluster-role-binding.yaml
// assets/etcd/etcd-operator-cluster-role.yaml
// assets/etcd/etcd-operator.yaml
// assets/etcd/etcd-secret-template.yaml
// assets/hypershift-operator/hypershift-operator-configmap.yaml
// assets/hypershift-operator/hypershift-operator-deployment.yaml
// assets/ignition-configs/20-apiserver-haproxy.yaml
// assets/ignition-configs/99-worker-ssh.yaml
// assets/ignition-deployment.yaml
// assets/ignition-route.yaml
// assets/ignition-service.yaml
// assets/konnectivity-server/konnectivity-agent-daemonset.yaml
// assets/konnectivity-server/konnectivity-agent-rbac.yaml
// assets/konnectivity-server/konnectivity-agent-sa.yaml
// assets/konnectivity-server/konnectivity-server-configmap.yaml
// assets/konnectivity-server/konnectivity-server-deployment.yaml
// assets/konnectivity-server/konnectivity-server-local-service.yaml
// assets/konnectivity-server/konnectivity-server-secret.yaml
// assets/kube-apiserver/client.conf
// assets/kube-apiserver/kube-apiserver-configmap.yaml
// assets/kube-apiserver/kube-apiserver-deployment-patch.yaml
// assets/kube-apiserver/kube-apiserver-secret.yaml
// assets/kube-apiserver/kube-apiserver-vpnclient-config.yaml
// assets/kube-apiserver/kube-apiserver-vpnclient-secret.yaml
// assets/kube-controller-manager/kube-controller-manager-configmap.yaml
// assets/kube-controller-manager/kube-controller-manager-secret.yaml
// assets/kube-scheduler/kube-scheduler-secret.yaml
// assets/machine-config-server/cluster-infrastructure-02-config.yaml
// assets/machine-config-server/cluster-network-02-config.yaml
// assets/machine-config-server/cluster-proxy-01-config.yaml
// assets/machine-config-server/install-config.yaml
// assets/machine-config-server/machine-config-server-configmap.yaml
// assets/machine-config-server/machine-config-server-deployment.yaml
// assets/machine-config-server/machine-config-server-kubeconfig-secret.yaml
// assets/machine-config-server/machine-config-server-route.yaml
// assets/machine-config-server/machine-config-server-secret.yaml
// assets/machine-config-server/machine-config-server-service.yaml
// assets/machine-config-server/master.machineconfigpool.yaml
// assets/machine-config-server/pull-secret.yaml
// assets/machine-config-server/worker.machineconfigpool.yaml
// assets/oauth-openshift/ingress-certs-secret.yaml
// assets/oauth-openshift/oauth-server-configmap.yaml
// assets/oauth-openshift/oauth-server-secret.yaml
// assets/openshift-apiserver/openshift-apiserver-configmap.yaml
// assets/openshift-apiserver/openshift-apiserver-secret.yaml
// assets/openshift-controller-manager/openshift-controller-manager-configmap.yaml
// assets/openshift-controller-manager/openshift-controller-manager-secret.yaml
// assets/openvpn/Dockerfile
// assets/openvpn/client.conf
// assets/openvpn/openvpn-ccd-configmap.yaml
// assets/openvpn/openvpn-client-configmap.yaml
// assets/openvpn/openvpn-client-deployment.yaml
// assets/openvpn/openvpn-client-secret.yaml
// assets/openvpn/openvpn-server-configmap.yaml
// assets/openvpn/openvpn-server-deployment.yaml
// assets/openvpn/openvpn-server-secret.yaml
// assets/openvpn/openvpn-server-service.yaml
// assets/openvpn/openvpn-serviceaccount.yaml
// assets/openvpn/server.conf
// assets/openvpn/worker
// assets/registry/cluster-imageregistry-config.yaml
// assets/router-proxy/client.conf
// assets/router-proxy/haproxy.cfg
// assets/router-proxy/router-proxy-configmap.yaml
// assets/router-proxy/router-proxy-deployment.yaml
// assets/router-proxy/router-proxy-http-service.yaml
// assets/router-proxy/router-proxy-https-service.yaml
// assets/router-proxy/router-proxy-vpnclient-configmap.yaml
// assets/router-proxy/router-proxy-vpnclient-secret.yaml
// assets/user-manifests-bootstrapper/user-manifest-template.yaml
// assets/user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiserverHaproxyApiserverIpService = []byte(`[Unit]
Description=Sets up local IP to proxy API server requests
Wants=network-online.target
After=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/setup-apiserver-ip.sh
ExecStop=/usr/local/bin/teardown-apiserver-ip.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
`)

func apiserverHaproxyApiserverIpServiceBytes() ([]byte, error) {
	return _apiserverHaproxyApiserverIpService, nil
}

func apiserverHaproxyApiserverIpService() (*asset, error) {
	bytes, err := apiserverHaproxyApiserverIpServiceBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/apiserver-ip.service", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiserverHaproxyHaproxyCfg = []byte(`global
  maxconn 7000

defaults
  mode tcp
  timeout client 10m
  timeout server 10m
  timeout connect 10s
  timeout client-fin 5s
  timeout server-fin 5s
  timeout queue 5s
  retries 3

frontend local_apiserver
  bind {{ .ExternalAPIAddress }}:6443
  default_backend remote_apiserver

backend remote_apiserver
  mode tcp
  server controlplane {{ .ExternalAPIDNSName }}:{{ .ExternalAPIPort }}
`)

func apiserverHaproxyHaproxyCfgBytes() ([]byte, error) {
	return _apiserverHaproxyHaproxyCfg, nil
}

func apiserverHaproxyHaproxyCfg() (*asset, error) {
	bytes, err := apiserverHaproxyHaproxyCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/haproxy.cfg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiserverHaproxyKubeApiserverProxyYaml = []byte(`apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver-proxy
  namespace: kube-system
  labels:
    k8s-app: kube-apiserver-proxy
spec:
  hostNetwork: true
  containers:
  - name: haproxy
    image: {{ imageFor "haproxy-router" }}
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 120
      successThreshold: 1
      tcpSocket:
        host: {{ .ExternalAPIAddress }}
        port: 6443
      timeoutSeconds: 60
    command:
    - haproxy
    - -f
    - /usr/local/etc/haproxy/haproxy.cfg
    volumeMounts:
    - name: config
      mountPath: /usr/local/etc/haproxy
  volumes:
  - name: config
    hostPath:
      path: /etc/kubernetes/apiserver-proxy-config
`)

func apiserverHaproxyKubeApiserverProxyYamlBytes() ([]byte, error) {
	return _apiserverHaproxyKubeApiserverProxyYaml, nil
}

func apiserverHaproxyKubeApiserverProxyYaml() (*asset, error) {
	bytes, err := apiserverHaproxyKubeApiserverProxyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/kube-apiserver-proxy.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiserverHaproxySetupApiserverIpSh = []byte(`#!/usr/bin/env bash
set -x
ip addr add {{ .ExternalAPIAddress }}/32 brd {{ .ExternalAPIAddress }} scope host dev lo
ip route add {{ .ExternalAPIAddress }}/32 dev lo scope link src {{ .ExternalAPIAddress }}
`)

func apiserverHaproxySetupApiserverIpShBytes() ([]byte, error) {
	return _apiserverHaproxySetupApiserverIpSh, nil
}

func apiserverHaproxySetupApiserverIpSh() (*asset, error) {
	bytes, err := apiserverHaproxySetupApiserverIpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/setup-apiserver-ip.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiserverHaproxyTeardownApiserverIpSh = []byte(`#!/usr/bin/env bash
set -x
ip addr delete {{ .ExternalAPIAddress }}/32 dev lo
ip route del {{ .ExternalAPIAddress }}/32 dev lo scope link src {{ .ExternalAPIAddress }}
`)

func apiserverHaproxyTeardownApiserverIpShBytes() ([]byte, error) {
	return _apiserverHaproxyTeardownApiserverIpSh, nil
}

func apiserverHaproxyTeardownApiserverIpSh() (*asset, error) {
	bytes, err := apiserverHaproxyTeardownApiserverIpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apiserver-haproxy/teardown-apiserver-ip.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBootstrapClusterIngresscontrollers02ConfigYaml = []byte(`apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name: default
  namespace: openshift-ingress-operator
spec:
  endpointPublishingStrategy:
    type: Private
  defaultCertificate:
    name: default-ingress-cert
status: {}
`)

func clusterBootstrapClusterIngresscontrollers02ConfigYamlBytes() ([]byte, error) {
	return _clusterBootstrapClusterIngresscontrollers02ConfigYaml, nil
}

func clusterBootstrapClusterIngresscontrollers02ConfigYaml() (*asset, error) {
	bytes, err := clusterBootstrapClusterIngresscontrollers02ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: null
  name: system:openshift:controller:namespace-security-allocation-controller
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - rangeallocations
  verbs:
  - create
  - get
  - update
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - update
  - watch
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
`)

func clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYamlBytes() ([]byte, error) {
	return _clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYaml, nil
}

func clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYaml() (*asset, error) {
	bytes, err := clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster-bootstrap/namespace-security-allocation-controller-clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  creationTimestamp: null
  name: system:openshift:controller:namespace-security-allocation-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:controller:namespace-security-allocation-controller
subjects:
- kind: ServiceAccount
  name: namespace-security-allocation-controller
  namespace: openshift-infra
`)

func clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYamlBytes() ([]byte, error) {
	return _clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYaml, nil
}

func clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster-bootstrap/namespace-security-allocation-controller-clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonServiceNetworkAdminKubeconfigSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: service-network-admin-kubeconfig
data:
  kubeconfig: {{ pki "internal-admin.kubeconfig" }}
`)

func commonServiceNetworkAdminKubeconfigSecretYamlBytes() ([]byte, error) {
	return _commonServiceNetworkAdminKubeconfigSecretYaml, nil
}

func commonServiceNetworkAdminKubeconfigSecretYaml() (*asset, error) {
	bytes, err := commonServiceNetworkAdminKubeconfigSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/service-network-admin-kubeconfig-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _controlPlaneOperatorCpOperatorConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: control-plane-operator
data:
  initial-ca.crt: |
{{ include_pki "combined-ca.crt"  4 }}
`)

func controlPlaneOperatorCpOperatorConfigmapYamlBytes() ([]byte, error) {
	return _controlPlaneOperatorCpOperatorConfigmapYaml, nil
}

func controlPlaneOperatorCpOperatorConfigmapYaml() (*asset, error) {
	bytes, err := controlPlaneOperatorCpOperatorConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "control-plane-operator/cp-operator-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdEtcdClusterCrdYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: etcdclusters.etcd.database.coreos.com
spec:
  conversion:
    strategy: None
  group: etcd.database.coreos.com
  names:
    kind: EtcdCluster
    listKind: EtcdClusterList
    plural: etcdclusters
    shortNames:
    - etcd
    singular: etcdcluster
  scope: Namespaced
  version: v1beta2
  versions:
  - name: v1beta2
    served: true
    storage: true
`)

func etcdEtcdClusterCrdYamlBytes() ([]byte, error) {
	return _etcdEtcdClusterCrdYaml, nil
}

func etcdEtcdClusterCrdYaml() (*asset, error) {
	bytes, err := etcdEtcdClusterCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-cluster-crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdEtcdClusterYaml = []byte(`apiVersion: etcd.database.coreos.com/v1beta2
kind: EtcdCluster
metadata:
  name: etcd
spec:
  size: 1
  version: "3.2.13"
  TLS:
    static:
      member:
        peerSecret: etcd-peer-tls
        serverSecret: etcd-server-tls
      operatorSecret: etcd-client-tls
`)

func etcdEtcdClusterYamlBytes() ([]byte, error) {
	return _etcdEtcdClusterYaml, nil
}

func etcdEtcdClusterYaml() (*asset, error) {
	bytes, err := etcdEtcdClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-cluster.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdEtcdOperatorClusterRoleBindingYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: etcd-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: etcd-operator
subjects:
- kind: ServiceAccount
  name: etcd-operator
  namespace: {{ .Namespace }}
`)

func etcdEtcdOperatorClusterRoleBindingYamlBytes() ([]byte, error) {
	return _etcdEtcdOperatorClusterRoleBindingYaml, nil
}

func etcdEtcdOperatorClusterRoleBindingYaml() (*asset, error) {
	bytes, err := etcdEtcdOperatorClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-operator-cluster-role-binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdEtcdOperatorClusterRoleYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: etcd-operator
rules:
- apiGroups:
  - etcd.database.coreos.com
  resources:
  - etcdclusters
  - etcdbackups
  - etcdrestores
  verbs:
  - "*"
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - "*"
# The following permissions can be removed if not using S3 backup and TLS
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
`)

func etcdEtcdOperatorClusterRoleYamlBytes() ([]byte, error) {
	return _etcdEtcdOperatorClusterRoleYaml, nil
}

func etcdEtcdOperatorClusterRoleYaml() (*asset, error) {
	bytes, err := etcdEtcdOperatorClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-operator-cluster-role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdEtcdOperatorYaml = []byte(`---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: etcd-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: etcd-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: etcd-operator
  template:
    metadata:
      labels:
        name: etcd-operator
{{ if .RestartDate }}
      annotations:
        openshift.io/restartedAt: "{{ .RestartDate }}"
{{ end }}
    spec:
      serviceAccountName: etcd-operator
      containers:
      - name: etcd-operator
        image: quay.io/coreos/etcd-operator:v0.9.4
        command:
        - etcd-operator
        env:
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
`)

func etcdEtcdOperatorYamlBytes() ([]byte, error) {
	return _etcdEtcdOperatorYaml, nil
}

func etcdEtcdOperatorYaml() (*asset, error) {
	bytes, err := etcdEtcdOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-operator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdEtcdSecretTemplateYaml = []byte(`kind: Secret
apiVersion: v1
metadata:
  name: {{ .file }}-tls
data:
  {{ .secret }}.crt: {{ pki (print .file ".crt") }}
  {{ .secret }}.key: {{ pki (print .file ".key") }}
  {{ .secret }}-ca.crt: {{ pki "root-ca.crt" }}
`)

func etcdEtcdSecretTemplateYamlBytes() ([]byte, error) {
	return _etcdEtcdSecretTemplateYaml, nil
}

func etcdEtcdSecretTemplateYaml() (*asset, error) {
	bytes, err := etcdEtcdSecretTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd/etcd-secret-template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hypershiftOperatorHypershiftOperatorConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: hypershift-operator
data:
  initial-ca.crt: |
{{ include_pki "combined-ca.crt"  4 }}
`)

func hypershiftOperatorHypershiftOperatorConfigmapYamlBytes() ([]byte, error) {
	return _hypershiftOperatorHypershiftOperatorConfigmapYaml, nil
}

func hypershiftOperatorHypershiftOperatorConfigmapYaml() (*asset, error) {
	bytes, err := hypershiftOperatorHypershiftOperatorConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hypershift-operator/hypershift-operator-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hypershiftOperatorHypershiftOperatorDeploymentYaml = []byte(`---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: hypershift-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hypershift-operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  verbs:
  - get
  - patch
  - update
  - create
  - list
  - watch
- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs:
  - get
  - patch
  - update
  - list
  - watch
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  - routes/custom-host
  verbs:
  - get
  - list
  - watch
  - patch
  - update
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hypershift-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hypershift-operator
subjects:
  - kind: ServiceAccount
    name: hypershift-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hypershift-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hypershift-operator
  template:
    metadata:
      labels:
        app: hypershift-operator
{{ if .RestartDate }}
      annotations:
        openshift.io/restartedAt: "{{ .RestartDate }}"
{{ end }}
    spec:
      tolerations:
        - key: "multi-az-worker"
          operator: "Equal"
          value: "true"
          effect: NoSchedule
      containers:
      - image: {{ .HypershiftOperatorImage }}
        imagePullPolicy: IfNotPresent
        name: hypershift-operator
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OPENSHIFT_RELEASE_VERSION
          value: {{ version "release" }}
        - name: KUBERNETES_VERSION
          value: {{ version "kubernetes" }}
        command:
        - "/usr/bin/hypershift-operator"
        - "--initial-ca-file=/etc/kubernetes/config/initial-ca.crt"
        - "--target-kubeconfig=/etc/kubernetes/kubeconfig/kubeconfig"
        - "--namespace"
        - "$(POD_NAMESPACE)"{{range $controller := .HypershiftOperatorControllers }}
        - "--controllers={{$controller}}"{{end}}
{{ if .HypershiftOperatorResources }}
        resources:{{ range .HypershiftOperatorResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        volumeMounts:
        - mountPath: /etc/kubernetes/kubeconfig
          name: kubeconfig
        - mountPath: /etc/kubernetes/config
          name: config
      restartPolicy: Always
      serviceAccountName: hypershift-operator
      volumes:
      - name: kubeconfig
        secret:
          secretName: service-network-admin-kubeconfig
      - name: config
        configMap:
          name: hypershift-operator
`)

func hypershiftOperatorHypershiftOperatorDeploymentYamlBytes() ([]byte, error) {
	return _hypershiftOperatorHypershiftOperatorDeploymentYaml, nil
}

func hypershiftOperatorHypershiftOperatorDeploymentYaml() (*asset, error) {
	bytes, err := hypershiftOperatorHypershiftOperatorDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hypershift-operator/hypershift-operator-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ignitionConfigs20ApiserverHaproxyYaml = []byte(`apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  name: 20-apiserver-haproxy
  labels:
    machineconfiguration.openshift.io/role: master
spec:
  config:
    ignition:
      version: 2.2.0
    storage:
      files:
      - filesystem: root
        path: "/usr/local/bin/setup-apiserver-ip.sh"
        contents:
          source: "{{ dataURLEncode "apiserver-haproxy/setup-apiserver-ip.sh" }}"
          verification: {}
        mode: 0755
      - filesystem: root
        path: "/usr/local/bin/teardown-apiserver-ip.sh"
        contents:
          source: "{{ dataURLEncode "apiserver-haproxy/teardown-apiserver-ip.sh" }}"
          verification: {}
        mode: 0755
      - filesystem: root
        path: "/etc/kubernetes/apiserver-proxy-config/haproxy.cfg"
        contents:
          source: "{{ dataURLEncode "apiserver-haproxy/haproxy.cfg" }}"
          verification: {}
        mode: 0644
      - filesystem: root
        path: "/etc/kubernetes/manifests/kube-apiserver-proxy.yaml"
        contents:
          source: "{{ dataURLEncode "apiserver-haproxy/kube-apiserver-proxy.yaml" }}"
          verification: {}
        mode: 0644
    systemd:
      units:
      - contents: |-
{{ include "apiserver-haproxy/apiserver-ip.service" 10 }}
        enabled: true
        name: "apiserver-ip.service"
`)

func ignitionConfigs20ApiserverHaproxyYamlBytes() ([]byte, error) {
	return _ignitionConfigs20ApiserverHaproxyYaml, nil
}

func ignitionConfigs20ApiserverHaproxyYaml() (*asset, error) {
	bytes, err := ignitionConfigs20ApiserverHaproxyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-configs/20-apiserver-haproxy.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ignitionConfigs99WorkerSshYaml = []byte(`apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  name: 99-worker-ssh
  labels:
    machineconfiguration.openshift.io/role: master
spec:
  config:
    ignition:
      version: 2.2.0
    passwd:
      users:
      - name: core
        sshAuthorizedKeys:
        - |-
          {{ .SSHKey }}
`)

func ignitionConfigs99WorkerSshYamlBytes() ([]byte, error) {
	return _ignitionConfigs99WorkerSshYaml, nil
}

func ignitionConfigs99WorkerSshYaml() (*asset, error) {
	bytes, err := ignitionConfigs99WorkerSshYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-configs/99-worker-ssh.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ignitionDeploymentYaml = []byte(`apiVersion: apps/v1
kind: Deployment
metadata:
  name: ignition-config
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ignition-provider
  template:
    metadata:
      labels:
        app: ignition-provider
    spec:
      containers:
      - args:
        - -m
        - http.server
        - --directory
        - /assets
        command:
        - /usr/local/bin/python
        image: docker.io/python:latest
        name: python
        ports:
        - containerPort: 8000
          name: web-server
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 150Mi
        volumeMounts:
        - mountPath: /assets
          name: ignition-config
      volumes:
      - configMap:
          defaultMode: 420
          name: ignition-config
        name: ignition-config
`)

func ignitionDeploymentYamlBytes() ([]byte, error) {
	return _ignitionDeploymentYaml, nil
}

func ignitionDeploymentYaml() (*asset, error) {
	bytes, err := ignitionDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ignitionRouteYaml = []byte(`apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: ignition-provider
spec:
  to:
    kind: Service
    name: ignition-provider
`)

func ignitionRouteYamlBytes() ([]byte, error) {
	return _ignitionRouteYaml, nil
}

func ignitionRouteYaml() (*asset, error) {
	bytes, err := ignitionRouteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-route.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ignitionServiceYaml = []byte(`apiVersion: v1
kind: Service
metadata:
  name: ignition-provider
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8000
  selector:
    app: ignition-provider
  type: ClusterIP
`)

func ignitionServiceYamlBytes() ([]byte, error) {
	return _ignitionServiceYaml, nil
}

func ignitionServiceYaml() (*asset, error) {
	bytes, err := ignitionServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ignition-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityAgentDaemonsetYaml = []byte(`apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    k8s-app: konnectivity-agent
  namespace: kube-system
  name: konnectivity-agent
spec:
  selector:
    matchLabels:
      k8s-app: konnectivity-agent
  template:
    metadata:
      labels:
        k8s-app: konnectivity-agent
    spec:
      priorityClassName: system-cluster-critical
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      containers:
      - image: us.gcr.io/k8s-artifacts-prod/kas-network-proxy/proxy-agent:v0.0.8
        name: konnectivity-agent
        command: ["/proxy-agent"]
        args: [
                "--logtostderr=true",
                "--ca-cert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                "--proxy-server-host={{ .KonnectivityServerAddress }}",
                "--proxy-server-port=8092",
                "--service-account-token-path=/var/run/secrets/tokens/konnectivity-agent-token"
                ]
        volumeMounts:
        - mountPath: /var/run/secrets/tokens
          name: konnectivity-agent-token
        livenessProbe:
          httpGet:
            port: 8093
            path: /healthz
          initialDelaySeconds: 15
          timeoutSeconds: 15
      serviceAccountName: konnectivity-agent
      volumes:
      - name: konnectivity-agent-token
        projected:
          sources:
          - serviceAccountToken:
              path: konnectivity-agent-token
              audience: system:konnectivity-server
`)

func konnectivityServerKonnectivityAgentDaemonsetYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityAgentDaemonsetYaml, nil
}

func konnectivityServerKonnectivityAgentDaemonsetYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityAgentDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-agent-daemonset.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityAgentRbacYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:konnectivity-server
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:konnectivity-server
`)

func konnectivityServerKonnectivityAgentRbacYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityAgentRbacYaml, nil
}

func konnectivityServerKonnectivityAgentRbacYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityAgentRbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-agent-rbac.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityAgentSaYaml = []byte(`apiVersion: v1
kind: ServiceAccount
metadata:
  name: konnectivity-agent
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
`)

func konnectivityServerKonnectivityAgentSaYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityAgentSaYaml, nil
}

func konnectivityServerKonnectivityAgentSaYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityAgentSaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-agent-sa.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityServerConfigmapYaml = []byte(`kind: ConfigMap
apiVersion: v1
metadata:
  name: konnectivity-server
data:
  ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
`)

func konnectivityServerKonnectivityServerConfigmapYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityServerConfigmapYaml, nil
}

func konnectivityServerKonnectivityServerConfigmapYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-server-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityServerDeploymentYaml = []byte(`apiVersion: apps/v1
kind: Deployment
metadata:
  name: konnectivity-server
  labels:
    app: konnectivity-server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 1
  selector:
    matchLabels:
      app: konnectivity-server
  template:
    metadata:
      labels:
        app: konnectivity-server
    spec:
      containers:
      - name: konnectivity-server
        image: us.gcr.io/k8s-artifacts-prod/kas-network-proxy/proxy-server:v0.0.12
        command: ["/proxy-server"]
        args: [
                "--logtostderr=true",
                "--log-file-max-size=0",
                "--cluster-cert=/etc/konnectivity-server/pki/server.crt",
                "--cluster-key=/etc/konnectivity-server/pki/server.key",
                "--server-cert=/etc/konnectivity-server/pki/local-server.crt",
                "--server-key=/etc/konnectivity-server/pki/local-server.key",
                "--server-ca-cert=/etc/konnectivity-server/config/ca.crt",
                "--mode=grpc",
                "--server-port=8090",
                "--agent-port=8091",
                "--health-port=8092",
                "--admin-port=8093",
                "--agent-namespace=kube-system",
                "--agent-service-account=konnectivity-agent",
                "--kubeconfig=/etc/konnectivity-server/kubeconfig/kubeconfig",
                "--authentication-audience=system:konnectivity-server"
                ]
        livenessProbe:
          httpGet:
            scheme: HTTP
            port: 8092
            path: /healthz
          initialDelaySeconds: 30
          timeoutSeconds: 60
        ports:
        - name: server
          containerPort: 8090
        - name: agent
          containerPort: 8091
        - name: health
          containerPort: 8092
        - name: admin
          containerPort: 8093
        volumeMounts:
        - name: konnectivity-server
          mountPath: /etc/konnectivity-server/pki/
          readOnly: true
        - name: konnectivity-server-config
          mountPath: /etc/konnectivity-server/config
          readOnly: true
        - name: kubeconfig
          mountPath: /etc/konnectivity-server/kubeconfig
          readOnly: true
      volumes:
      - name: konnectivity-server
        secret:
          secretName: konnectivity-server
      - name: konnectivity-server-config
        configMap:
          name: konnectivity-server
      - name: kubeconfig
        secret:
          secretName: service-network-admin-kubeconfig
`)

func konnectivityServerKonnectivityServerDeploymentYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityServerDeploymentYaml, nil
}

func konnectivityServerKonnectivityServerDeploymentYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityServerLocalServiceYaml = []byte(`apiVersion: v1
kind: Service
metadata:
  name: konnectivity-server-local
spec:
  ports:
  - port: 8090
    protocol: TCP
    targetPort: 8090
  selector:
    app: konnectivity-server
  type: ClusterIP
`)

func konnectivityServerKonnectivityServerLocalServiceYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityServerLocalServiceYaml, nil
}

func konnectivityServerKonnectivityServerLocalServiceYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityServerLocalServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-server-local-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _konnectivityServerKonnectivityServerSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: konnectivity-server
data:
  server.crt: {{ pki "konnectivity-server.crt" }}
  server.key: {{ pki "konnectivity-server.key" }}
  local-server.crt: {{ pki "konnectivity-server-local.crt" }}
  local-server.key: {{ pki "konnectivity-server-local.key" }}
`)

func konnectivityServerKonnectivityServerSecretYamlBytes() ([]byte, error) {
	return _konnectivityServerKonnectivityServerSecretYaml, nil
}

func konnectivityServerKonnectivityServerSecretYaml() (*asset, error) {
	bytes, err := konnectivityServerKonnectivityServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "konnectivity-server/konnectivity-server-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeApiserverClientConf = []byte(`client
verb 3
nobind
dev tun
remote-cert-tls server
remote openvpn-server 1194 tcp
ca secret/ca.crt
cert secret/tls.crt
key secret/tls.key
`)

func kubeApiserverClientConfBytes() ([]byte, error) {
	return _kubeApiserverClientConf, nil
}

func kubeApiserverClientConf() (*asset, error) {
	bytes, err := kubeApiserverClientConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/client.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeApiserverKubeApiserverConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-apiserver
data:
  aggregator-client-ca.crt: |-
{{ include_pki "root-ca.crt" 4 }}
  kubelet-client-ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
  service-account.pub: |-
{{ include_pki "service-account.pub" 4 }}
  serving-ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
  etcd-ca.crt: |-
{{ include_pki "root-ca.crt" 4 }}
`)

func kubeApiserverKubeApiserverConfigmapYamlBytes() ([]byte, error) {
	return _kubeApiserverKubeApiserverConfigmapYaml, nil
}

func kubeApiserverKubeApiserverConfigmapYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeApiserverKubeApiserverDeploymentPatchYaml = []byte(`- op: add
  path: /spec/template/spec/containers/0/securityContext
  value:
    runAsUser: 1001
    capabilities:
      drop:
      - MKNOD
      - NET_ADMIN
- op: add
  path: /spec/template/spec/volumes/-
  value:
    name: vpnconfig
    configMap:
      name: kube-apiserver-vpnclient-config
- op: add
  path: /spec/template/spec/volumes/-
  value:
    name: vpnsecret
    secret:
      secretName: kube-apiserver-vpnclient-secret
- op: add
  path: /spec/template/spec/serviceAccountName
  value: vpn
- op: add
  path: /spec/template/spec/containers/-
  value:
    name: openvpn-client
    image: quay.io/hypershift/openvpn:latest
    imagePullPolicy: Always
    command:
    - /usr/sbin/openvpn
    args:
    - --config
    - /etc/openvpn/config/client.conf
    workingDir: /etc/openvpn/
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /etc/openvpn/secret
      name: vpnsecret
    - mountPath: /etc/openvpn/config
      name: vpnconfig
`)

func kubeApiserverKubeApiserverDeploymentPatchYamlBytes() ([]byte, error) {
	return _kubeApiserverKubeApiserverDeploymentPatchYaml, nil
}

func kubeApiserverKubeApiserverDeploymentPatchYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverDeploymentPatchYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-deployment-patch.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeApiserverKubeApiserverSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: kube-apiserver
data:
  server.crt: {{ pki "kube-apiserver-server.crt" }}
  server.key: {{ pki "kube-apiserver-server.key" }}
  kubelet-client.crt: {{ pki "kube-apiserver-kubelet.crt" }}
  kubelet-client.key: {{ pki "kube-apiserver-kubelet.key" }}
  etcd-client.crt: {{ pki "etcd-client.crt" }}
  etcd-client.key: {{ pki "etcd-client.key" }}
  proxy-client.crt: {{ pki "kube-apiserver-aggregator-proxy-client.crt" }}
  proxy-client.key: {{ pki "kube-apiserver-aggregator-proxy-client.key" }}
  service-account.key: {{ pki "service-account.key" }}
`)

func kubeApiserverKubeApiserverSecretYamlBytes() ([]byte, error) {
	return _kubeApiserverKubeApiserverSecretYaml, nil
}

func kubeApiserverKubeApiserverSecretYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeApiserverKubeApiserverVpnclientConfigYaml = []byte(`kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-apiserver-vpnclient-config
data:
  client.conf: |-
{{ include "kube-apiserver/client.conf" 4 }}
`)

func kubeApiserverKubeApiserverVpnclientConfigYamlBytes() ([]byte, error) {
	return _kubeApiserverKubeApiserverVpnclientConfigYaml, nil
}

func kubeApiserverKubeApiserverVpnclientConfigYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverVpnclientConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-vpnclient-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeApiserverKubeApiserverVpnclientSecretYaml = []byte(`kind: Secret
apiVersion: v1
metadata:
  name: kube-apiserver-vpnclient-secret
data:
  tls.crt: {{ pki "openvpn-kube-apiserver-client.crt" }}
  tls.key: {{ pki "openvpn-kube-apiserver-client.key" }}
  ca.crt: {{ pki "openvpn-ca.crt" }}
`)

func kubeApiserverKubeApiserverVpnclientSecretYamlBytes() ([]byte, error) {
	return _kubeApiserverKubeApiserverVpnclientSecretYaml, nil
}

func kubeApiserverKubeApiserverVpnclientSecretYaml() (*asset, error) {
	bytes, err := kubeApiserverKubeApiserverVpnclientSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-apiserver/kube-apiserver-vpnclient-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeControllerManagerKubeControllerManagerConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-controller-manager
data:
  root-ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
  service-ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
`)

func kubeControllerManagerKubeControllerManagerConfigmapYamlBytes() ([]byte, error) {
	return _kubeControllerManagerKubeControllerManagerConfigmapYaml, nil
}

func kubeControllerManagerKubeControllerManagerConfigmapYaml() (*asset, error) {
	bytes, err := kubeControllerManagerKubeControllerManagerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-controller-manager/kube-controller-manager-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeControllerManagerKubeControllerManagerSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: kube-controller-manager
data:
  kubeconfig: {{ pki "internal-admin.kubeconfig" }}
  service-account.key: {{ pki "service-account.key" }}
  cluster-signer.crt: {{ pki "cluster-signer.crt" }}
  cluster-signer.key: {{ pki "cluster-signer.key" }}
`)

func kubeControllerManagerKubeControllerManagerSecretYamlBytes() ([]byte, error) {
	return _kubeControllerManagerKubeControllerManagerSecretYaml, nil
}

func kubeControllerManagerKubeControllerManagerSecretYaml() (*asset, error) {
	bytes, err := kubeControllerManagerKubeControllerManagerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-controller-manager/kube-controller-manager-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeSchedulerKubeSchedulerSecretYaml = []byte(`kind: Secret
apiVersion: v1
metadata:
  name: kube-scheduler
data:
  kubeconfig: {{ pki "internal-admin.kubeconfig" }}
`)

func kubeSchedulerKubeSchedulerSecretYamlBytes() ([]byte, error) {
	return _kubeSchedulerKubeSchedulerSecretYaml, nil
}

func kubeSchedulerKubeSchedulerSecretYaml() (*asset, error) {
	bytes, err := kubeSchedulerKubeSchedulerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kube-scheduler/kube-scheduler-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerClusterInfrastructure02ConfigYaml = []byte(`apiVersion: config.openshift.io/v1
kind: Infrastructure
metadata:
  name: cluster
spec:
  cloudConfig:
    name: ""
status:
  apiServerInternalURI: https://{{ .ExternalAPIDNSName }}:{{ .ExternalAPIPort }}
  apiServerURL: https://{{ .ExternalAPIDNSName }}:{{ .ExternalAPIPort }}
  etcdDiscoveryDomain: {{ .BaseDomain }}
  infrastructureName: kubernetes
  platform: {{ if .PlatformType }}{{ .PlatformType }}{{ else }}None {{ end }}
  platformStatus: {{ if eq .PlatformType "IBMCloud" }}
    type: {{ .PlatformType }} {{ else }}
    type: None {{ end }}
`)

func machineConfigServerClusterInfrastructure02ConfigYamlBytes() ([]byte, error) {
	return _machineConfigServerClusterInfrastructure02ConfigYaml, nil
}

func machineConfigServerClusterInfrastructure02ConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerClusterInfrastructure02ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/cluster-infrastructure-02-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerClusterNetwork02ConfigYaml = []byte(`apiVersion: config.openshift.io/v1
kind: Network
metadata:
  name: cluster
spec:
  clusterNetwork:
  - cidr: {{ .PodCIDR }}
    hostPrefix: 23
  externalIP:
    policy: {}
  networkType: {{ .NetworkType }}
  serviceNetwork:
  - {{ .ServiceCIDR }}
status: {}
`)

func machineConfigServerClusterNetwork02ConfigYamlBytes() ([]byte, error) {
	return _machineConfigServerClusterNetwork02ConfigYaml, nil
}

func machineConfigServerClusterNetwork02ConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerClusterNetwork02ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/cluster-network-02-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerClusterProxy01ConfigYaml = []byte(`apiVersion: config.openshift.io/v1
kind: Proxy
metadata:
  name: cluster
spec:
  trustedCA:
    name: ""
status: {}
`)

func machineConfigServerClusterProxy01ConfigYamlBytes() ([]byte, error) {
	return _machineConfigServerClusterProxy01ConfigYaml, nil
}

func machineConfigServerClusterProxy01ConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerClusterProxy01ConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/cluster-proxy-01-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerInstallConfigYaml = []byte(`apiVersion: v1
controlPlane:
  replicas: 1
networking:
  machineCIDR: 10.0.0.0/16
platform:
  none: {}
`)

func machineConfigServerInstallConfigYamlBytes() ([]byte, error) {
	return _machineConfigServerInstallConfigYaml, nil
}

func machineConfigServerInstallConfigYaml() (*asset, error) {
	bytes, err := machineConfigServerInstallConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/install-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMachineConfigServerConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: machine-config-server
data:
  root-ca.crt: |-
{{ include_pki "root-ca.crt" 4 }}
  combined-ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
  cluster-infrastructure-02-config.yaml: |-
{{ include "machine-config-server/cluster-infrastructure-02-config.yaml" 4 }}
  cluster-network-02-config.yaml: |-
{{ include "machine-config-server/cluster-network-02-config.yaml" 4 }}
  cluster-proxy-01-config.yaml: |-
{{ include "machine-config-server/cluster-proxy-01-config.yaml" 4 }}
  install-config.yaml: |-
{{ include "machine-config-server/install-config.yaml" 4 }}
  pull-secret.yaml: |-
{{ include "machine-config-server/pull-secret.yaml" 4 }}
  master.machineconfigpool.yaml: |-
{{ include "machine-config-server/master.machineconfigpool.yaml" 4 }}
  worker.machineconfigpool.yaml: |-
{{ include "machine-config-server/worker.machineconfigpool.yaml" 4 }}
`)

func machineConfigServerMachineConfigServerConfigmapYamlBytes() ([]byte, error) {
	return _machineConfigServerMachineConfigServerConfigmapYaml, nil
}

func machineConfigServerMachineConfigServerConfigmapYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMachineConfigServerDeploymentYaml = []byte(`---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: machine-config-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-config-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
  - kind: ServiceAccount
    name: machine-config-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: machine-config-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: machine-config-server
  template:
    metadata:
      labels:
        app: machine-config-server
    spec:
      tolerations:
        - key: "multi-az-worker"
          operator: "Equal"
          value: "true"
          effect: NoSchedule
      serviceAccountName: machine-config-server
      initContainers:
      - image: {{ imageFor "machine-config-operator" }}
        name: machine-config-operator-bootstrap
        command:
        - /bin/bash
        args:
        - -c
        - |-
          mkdir -p /mcc-manifests/bootstrap/manifests
          mkdir -p /mcc-manifests/manifests
          exec machine-config-operator bootstrap \{{ if lessthan_version "4.6.0" }}
          --etcd-ca=/assets/manifests/root-ca.crt \
          --etcd-metric-ca=/assets/manifests/root-ca.crt \
          --etcd-image={{ imageFor "etcd" }} \
          --kube-client-agent-image={{ imageFor "kube-client-agent" }} \{{ end }}
          --root-ca=/assets/manifests/root-ca.crt \
          --kube-ca=/assets/manifests/combined-ca.crt \
          --machine-config-operator-image={{ imageFor "machine-config-operator" }} \
          --machine-config-oscontent-image={{ imageFor "machine-os-content" }} \
          --infra-image={{ imageFor "pod" }} \
          --keepalived-image={{ imageFor "keepalived-ipfailover" }} \
          --coredns-image={{ imageFor "coredns" }} \
          --mdns-publisher-image={{ imageFor "mdns-publisher" }} \
          --haproxy-image={{ imageFor "haproxy-router" }} \
          --baremetal-runtimecfg-image={{ imageFor "baremetal-runtimecfg" }} \
          --infra-config-file=/assets/manifests/cluster-infrastructure-02-config.yaml \
          --network-config-file=/assets/manifests/cluster-network-02-config.yaml \
          --proxy-config-file=/assets/manifests/cluster-proxy-01-config.yaml \
          --config-file=/assets/manifests/install-config.yaml \
          --dest-dir=/mcc-manifests \
          --pull-secret=/assets/manifests/pull-secret.yaml

          # Use our own version of configpools that swap master and workers
          mv /mcc-manifests/bootstrap/manifests /mcc-manifests/bootstrap/manifests.tmp
          mkdir /mcc-manifests/bootstrap/manifests
          cp /mcc-manifests/bootstrap/manifests.tmp/* /mcc-manifests/bootstrap/manifests/
          cp /assets/manifests/*.machineconfigpool.yaml /mcc-manifests/bootstrap/manifests/
        volumeMounts:
        - mountPath: /mcc-manifests
          name: mcc-manifests
        - mountPath: /assets/manifests
          name: config
      - image: {{ imageFor "cli" }}
        imagePullPolicy: IfNotPresent
        name: inject-custom-machine-configs
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        workingDir: /tmp
        command:
        - /usr/bin/bash
        args:
        - -c
        - |-
          cat <<"EOF" > "./copy-ignition-config.sh"
          #!/bin/bash
          name="${1}"
          oc get cm ${name} -n "${NAMESPACE}" -o jsonpath='{ .data.data }' > "/mcc-manifests/bootstrap/manifests/${name/#ignition-config-//}.yaml"
          EOF
          chmod +x ./copy-ignition-config.sh
          oc get cm -l ignition-config="true" -n "${NAMESPACE}" --no-headers | awk '{ print $1 }' | xargs -n1 ./copy-ignition-config.sh
        volumeMounts:
        - mountPath: /mcc-manifests
          name: mcc-manifests
      - image: {{ imageFor "machine-config-operator" }}
        imagePullPolicy: IfNotPresent
        name: machine-config-controller-bootstrap
        command:
        - /usr/bin/machine-config-controller
        args:
        - bootstrap
        - --manifest-dir=/mcc-manifests/bootstrap/manifests
        - --pull-secret=/mcc-manifests/bootstrap/manifests/machineconfigcontroller-pull-secret
        - --dest-dir=/mcs-manifests
        volumeMounts:
        - mountPath: /mcc-manifests
          name: mcc-manifests
        - mountPath: /mcs-manifests
          name: mcs-manifests
      containers:
      - image: {{ imageFor "machine-config-operator" }}
        imagePullPolicy: IfNotPresent
        name: machine-config-server
        command:
        - /usr/bin/machine-config-server
        args:
        - bootstrap
        - --bootstrap-kubeconfig=/etc/openshift/kubeconfig
        - --secure-port=8443
        - --insecure-port=8080
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/openshift
          name: kubeconfig
          readOnly: true
        - mountPath: /etc/mcs/bootstrap
          name: mcs-manifests
        - mountPath: /etc/mcc/bootstrap
          name: mcc-manifests
        - mountPath: /etc/ssl/mcs
          name: mcs-tls
      volumes:
      - name: kubeconfig
        secret:
          secretName: machine-config-server-kubeconfig
      - name: mcs-tls
        secret:
          secretName: machine-config-server
      - name: mcc-manifests
        emptyDir: {}
      - name: mcs-manifests
        emptyDir: {}
      - name: config
        configMap:
          name: machine-config-server
`)

func machineConfigServerMachineConfigServerDeploymentYamlBytes() ([]byte, error) {
	return _machineConfigServerMachineConfigServerDeploymentYaml, nil
}

func machineConfigServerMachineConfigServerDeploymentYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMachineConfigServerKubeconfigSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: machine-config-server-kubeconfig
type: Opaque
data:
  kubeconfig: {{ pki "kubelet-bootstrap.kubeconfig" }}
`)

func machineConfigServerMachineConfigServerKubeconfigSecretYamlBytes() ([]byte, error) {
	return _machineConfigServerMachineConfigServerKubeconfigSecretYaml, nil
}

func machineConfigServerMachineConfigServerKubeconfigSecretYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerKubeconfigSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-kubeconfig-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMachineConfigServerRouteYaml = []byte(`apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: ignition-provider
spec:
  to:
    kind: Service
    name: machine-config-server
    weight: 100
  wildcardPolicy: None
`)

func machineConfigServerMachineConfigServerRouteYamlBytes() ([]byte, error) {
	return _machineConfigServerMachineConfigServerRouteYaml, nil
}

func machineConfigServerMachineConfigServerRouteYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerRouteYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-route.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMachineConfigServerSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: machine-config-server
type: Opaque
data:
  tls.crt: {{ pki "machine-config-server.crt" }}
  tls.key: {{ pki "machine-config-server.key" }}
`)

func machineConfigServerMachineConfigServerSecretYamlBytes() ([]byte, error) {
	return _machineConfigServerMachineConfigServerSecretYaml, nil
}

func machineConfigServerMachineConfigServerSecretYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMachineConfigServerServiceYaml = []byte(`apiVersion: v1
kind: Service
metadata:
  name: machine-config-server
spec:
  ports:
  - port: 80
    name: http
    protocol: TCP
    targetPort: 8080
  selector:
    app: machine-config-server
  type: ClusterIP
`)

func machineConfigServerMachineConfigServerServiceYamlBytes() ([]byte, error) {
	return _machineConfigServerMachineConfigServerServiceYaml, nil
}

func machineConfigServerMachineConfigServerServiceYaml() (*asset, error) {
	bytes, err := machineConfigServerMachineConfigServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/machine-config-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerMasterMachineconfigpoolYaml = []byte(`apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfigPool
metadata:
  name: master
  labels:
    "machineconfiguration.openshift.io/mco-built-in": ""
spec:
  machineConfigSelector:
    matchLabels:
      "machineconfiguration.openshift.io/role": "worker"
  nodeSelector:
    matchLabels:
      node-role.kubernetes.io/worker: ""
`)

func machineConfigServerMasterMachineconfigpoolYamlBytes() ([]byte, error) {
	return _machineConfigServerMasterMachineconfigpoolYaml, nil
}

func machineConfigServerMasterMachineconfigpoolYaml() (*asset, error) {
	bytes, err := machineConfigServerMasterMachineconfigpoolYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/master.machineconfigpool.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerPullSecretYaml = []byte(`apiVersion: v1
kind: Secret
type: kubernetes.io/dockerconfigjson
metadata:
  namespace: openshift-config
  name: pull-secret
data:
  .dockerconfigjson: {{ pullSecretBase64 }}
`)

func machineConfigServerPullSecretYamlBytes() ([]byte, error) {
	return _machineConfigServerPullSecretYaml, nil
}

func machineConfigServerPullSecretYaml() (*asset, error) {
	bytes, err := machineConfigServerPullSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/pull-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _machineConfigServerWorkerMachineconfigpoolYaml = []byte(`apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfigPool
metadata:
  name: worker
  labels:
    "operator.machineconfiguration.openshift.io/required-for-upgrade": ""
    "machineconfiguration.openshift.io/mco-built-in": ""
spec:
  machineConfigSelector:
    matchLabels:
      "machineconfiguration.openshift.io/role": "master"
  nodeSelector:
    matchLabels:
      node-role.kubernetes.io/master: ""
`)

func machineConfigServerWorkerMachineconfigpoolYamlBytes() ([]byte, error) {
	return _machineConfigServerWorkerMachineconfigpoolYaml, nil
}

func machineConfigServerWorkerMachineconfigpoolYaml() (*asset, error) {
	bytes, err := machineConfigServerWorkerMachineconfigpoolYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "machine-config-server/worker.machineconfigpool.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _oauthOpenshiftIngressCertsSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: default-ingress-cert
  namespace: openshift-ingress
data:
  tls.crt: {{ pki "ingress-openshift.crt" }}
  tls.key: {{ pki "ingress-openshift.key" }}
`)

func oauthOpenshiftIngressCertsSecretYamlBytes() ([]byte, error) {
	return _oauthOpenshiftIngressCertsSecretYaml, nil
}

func oauthOpenshiftIngressCertsSecretYaml() (*asset, error) {
	bytes, err := oauthOpenshiftIngressCertsSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "oauth-openshift/ingress-certs-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _oauthOpenshiftOauthServerConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: oauth-openshift
data:
  ca.crt: |-
{{ include_pki "combined-ca.crt" 4 }}
`)

func oauthOpenshiftOauthServerConfigmapYamlBytes() ([]byte, error) {
	return _oauthOpenshiftOauthServerConfigmapYaml, nil
}

func oauthOpenshiftOauthServerConfigmapYaml() (*asset, error) {
	bytes, err := oauthOpenshiftOauthServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "oauth-openshift/oauth-server-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _oauthOpenshiftOauthServerSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: oauth-openshift
data:
  kubeconfig: {{ pki "internal-admin.kubeconfig" }}
  server.crt: {{ pki "ingress-openshift.crt" }}
  server.key: {{ pki "ingress-openshift.key" }}
`)

func oauthOpenshiftOauthServerSecretYamlBytes() ([]byte, error) {
	return _oauthOpenshiftOauthServerSecretYaml, nil
}

func oauthOpenshiftOauthServerSecretYaml() (*asset, error) {
	bytes, err := oauthOpenshiftOauthServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "oauth-openshift/oauth-server-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openshiftApiserverOpenshiftApiserverConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: openshift-apiserver
data:
  aggregator-client-ca.crt: |-
{{ include_pki "root-ca.crt" 4 }}
  etcd-ca.crt: |-
{{ include_pki "root-ca.crt" 4 }}
  serving-ca.crt: |- 
{{ include_pki "root-ca.crt" 4 }}
`)

func openshiftApiserverOpenshiftApiserverConfigmapYamlBytes() ([]byte, error) {
	return _openshiftApiserverOpenshiftApiserverConfigmapYaml, nil
}

func openshiftApiserverOpenshiftApiserverConfigmapYaml() (*asset, error) {
	bytes, err := openshiftApiserverOpenshiftApiserverConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-apiserver/openshift-apiserver-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openshiftApiserverOpenshiftApiserverSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: openshift-apiserver
data:
  kubeconfig: {{ pki "internal-admin.kubeconfig" }}
  server.crt: {{ pki "openshift-apiserver-server.crt" }}
  server.key: {{ pki "openshift-apiserver-server.key" }}
  etcd-client.crt: {{ pki "etcd-client.crt" }}
  etcd-client.key: {{ pki "etcd-client.key" }}
`)

func openshiftApiserverOpenshiftApiserverSecretYamlBytes() ([]byte, error) {
	return _openshiftApiserverOpenshiftApiserverSecretYaml, nil
}

func openshiftApiserverOpenshiftApiserverSecretYaml() (*asset, error) {
	bytes, err := openshiftApiserverOpenshiftApiserverSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-apiserver/openshift-apiserver-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: openshift-controller-manager
data:
  serving-ca.crt: |-
{{ include_pki "root-ca.crt"  4 }}
`)

func openshiftControllerManagerOpenshiftControllerManagerConfigmapYamlBytes() ([]byte, error) {
	return _openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml, nil
}

func openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml() (*asset, error) {
	bytes, err := openshiftControllerManagerOpenshiftControllerManagerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-controller-manager/openshift-controller-manager-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openshiftControllerManagerOpenshiftControllerManagerSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: openshift-controller-manager
data:
  kubeconfig: {{ pki "internal-admin.kubeconfig" }}
  server.crt: {{ pki "openshift-controller-manager-server.crt" }}
  server.key: {{ pki "openshift-controller-manager-server.key" }}
`)

func openshiftControllerManagerOpenshiftControllerManagerSecretYamlBytes() ([]byte, error) {
	return _openshiftControllerManagerOpenshiftControllerManagerSecretYaml, nil
}

func openshiftControllerManagerOpenshiftControllerManagerSecretYaml() (*asset, error) {
	bytes, err := openshiftControllerManagerOpenshiftControllerManagerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openshift-controller-manager/openshift-controller-manager-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnDockerfile = []byte(`FROM registry.access.redhat.com/ubi7/ubi
RUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \
    yum install -y openvpn && \
    yum clean all
CMD ["/usr/sbin/openvpn"]
`)

func openvpnDockerfileBytes() ([]byte, error) {
	return _openvpnDockerfile, nil
}

func openvpnDockerfile() (*asset, error) {
	bytes, err := openvpnDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnClientConf = []byte(`client
verb 3
nobind
dev tun
remote-cert-tls server
remote {{ .ExternalOpenVPNAddress }} {{ .ExternalOpenVPNPort }} tcp
ca ca.crt
cert tls.crt
key tls.key
`)

func openvpnClientConfBytes() ([]byte, error) {
	return _openvpnClientConf, nil
}

func openvpnClientConf() (*asset, error) {
	bytes, err := openvpnClientConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/client.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnCcdConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: openvpn-ccd
data:
  worker: |-
{{ include "openvpn/worker" 4 }}
`)

func openvpnOpenvpnCcdConfigmapYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnCcdConfigmapYaml, nil
}

func openvpnOpenvpnCcdConfigmapYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnCcdConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-ccd-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnClientConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: openvpn-client
  namespace: kube-system
data:
  client.conf: |-
{{ include "openvpn/client.conf" 4 }}
`)

func openvpnOpenvpnClientConfigmapYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnClientConfigmapYaml, nil
}

func openvpnOpenvpnClientConfigmapYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnClientConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-client-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnClientDeploymentYaml = []byte(`kind: Deployment
apiVersion: apps/v1
metadata:
  name: openvpn-client
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openvpn-client
  template:
    metadata:
      labels:
        app: openvpn-client
    spec:
      automountServiceAccountToken: false
      containers:
      - name: openvpn-client
        image: quay.io/hypershift/openvpn:latest
        imagePullPolicy: Always
        command:
        - /bin/bash
        args:
        - -c
        - |-
          #!/bin/bash
          set -eu
          iptables -t nat -A POSTROUTING -s 192.168.255.0/24 -j MASQUERADE
          exec /usr/sbin/openvpn --config /etc/openvpn-config/client.conf
        workingDir: /etc/openvpn
        securityContext:
          privileged: true
{{ if .OpenVPNClientResources }}
        resources:{{ range .OpenVPNClientResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        volumeMounts:
        - mountPath: /etc/openvpn
          name: secret
        - mountPath: /etc/openvpn-config
          name: config
        - mountPath: /lib/modules
          name: host-modules
          readOnly: true
      volumes:
      - secret:
          secretName: openvpn-client
        name: secret
      - name: config
        configMap:
          name: openvpn-client
      - hostPath:
          path: /lib/modules
        name: host-modules
`)

func openvpnOpenvpnClientDeploymentYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnClientDeploymentYaml, nil
}

func openvpnOpenvpnClientDeploymentYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnClientDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-client-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnClientSecretYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: user-manifest-openvpn-client-secret
data:
  data: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: openvpn-client
      namespace: kube-system
    data:
      tls.crt: {{ pki "openvpn-worker-client.crt" }}
      tls.key: {{ pki "openvpn-worker-client.key" }}
      ca.crt: {{ pki "openvpn-ca.crt" }}
`)

func openvpnOpenvpnClientSecretYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnClientSecretYaml, nil
}

func openvpnOpenvpnClientSecretYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnClientSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-client-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnServerConfigmapYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  name: openvpn-server
data:
  server.conf: |-
{{ include "openvpn/server.conf" 4 }}
`)

func openvpnOpenvpnServerConfigmapYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnServerConfigmapYaml, nil
}

func openvpnOpenvpnServerConfigmapYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnServerDeploymentYaml = []byte(`kind: Deployment
apiVersion: apps/v1
metadata:
  name: openvpn-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openvpn-server
  template:
    metadata:
      labels:
        app: openvpn-server
{{ if .RestartDate }}
      annotations:
        openshift.io/restartedAt: "{{ .RestartDate }}"
{{ end }}
    spec:
      automountServiceAccountToken: false
      containers:
      - name: openvpn-server
        image: quay.io/hypershift/openvpn:latest
        imagePullPolicy: Always
        command:
        - /usr/sbin/openvpn
        args:
        - --config
        - /etc/openvpn/config/server.conf
        workingDir: /etc/openvpn/server
        securityContext:
          privileged: true
{{ if .OpenVPNServerResources }}
        resources:{{ range .OpenVPNServerResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        volumeMounts:
        - mountPath: /etc/openvpn/server
          name: server
        - mountPath: /etc/openvpn/ccd
          name: ccd
        - mountPath: /etc/openvpn/config
          name: config
      serviceAccountName: vpn
      volumes:
      - secret:
          secretName: openvpn-server
        name: server
      - configMap:
          name: openvpn-server
        name: config
      - configMap:
          name: openvpn-ccd
        name: ccd
`)

func openvpnOpenvpnServerDeploymentYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnServerDeploymentYaml, nil
}

func openvpnOpenvpnServerDeploymentYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnServerSecretYaml = []byte(`apiVersion: v1
kind: Secret
metadata:
  name: openvpn-server
data:
  tls.crt: {{ pki "openvpn-server.crt" }}
  tls.key: {{ pki "openvpn-server.key" }}
  ca.crt: {{ pki "openvpn-ca.crt" }}
  dh.pem: {{ pki "openvpn-dh.pem" }}
`)

func openvpnOpenvpnServerSecretYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnServerSecretYaml, nil
}

func openvpnOpenvpnServerSecretYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnServerServiceYaml = []byte(`apiVersion: v1
kind: Service
metadata:
  name: openvpn-server
spec:
  ports:
  - port: 1194
    protocol: TCP
    targetPort: 1194
    nodePort: {{ .OpenVPNNodePort }}
  selector:
    app: openvpn-server
  type: NodePort
`)

func openvpnOpenvpnServerServiceYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnServerServiceYaml, nil
}

func openvpnOpenvpnServerServiceYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnOpenvpnServiceaccountYaml = []byte(`kind: ServiceAccount
apiVersion: v1
metadata:
  name: vpn
`)

func openvpnOpenvpnServiceaccountYamlBytes() ([]byte, error) {
	return _openvpnOpenvpnServiceaccountYaml, nil
}

func openvpnOpenvpnServiceaccountYaml() (*asset, error) {
	bytes, err := openvpnOpenvpnServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/openvpn-serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnServerConf = []byte(`server 192.168.255.0 255.255.255.0
verb 3
ca ca.crt
cert tls.crt
key tls.key
dh dh.pem
#TODO figure out how to generate this without needing the openvpn command if possible
#tls-auth /etc/openvpn/pki/ta.key
#key-direction 0
keepalive 10 60
persist-key
persist-tun

proto tcp
# Rely on Docker to do port mapping, internally always 1194
port 1194
dev tun0
status /tmp/openvpn-status.log

comp-lzo no

client-config-dir /etc/openvpn/ccd

### Route Configurations Below
route {{ address .PodCIDR }} {{ mask .PodCIDR }}
route {{ address .ServiceCIDR }} {{ mask .ServiceCIDR }}


### Push Configurations Below
push "comp-lzo no"

### Extra Configurations Below
duplicate-cn
client-to-client
push "route {{ address .PodCIDR }} {{ mask .PodCIDR }}"
push "route {{ address .ServiceCIDR }} {{ mask .ServiceCIDR }}"
`)

func openvpnServerConfBytes() ([]byte, error) {
	return _openvpnServerConf, nil
}

func openvpnServerConf() (*asset, error) {
	bytes, err := openvpnServerConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/server.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _openvpnWorker = []byte(`iroute {{ address .ServiceCIDR }} {{ mask .ServiceCIDR }}
iroute {{ address .PodCIDR }} {{ mask .PodCIDR }}
`)

func openvpnWorkerBytes() ([]byte, error) {
	return _openvpnWorker, nil
}

func openvpnWorker() (*asset, error) {
	bytes, err := openvpnWorkerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openvpn/worker", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registryClusterImageregistryConfigYaml = []byte(`apiVersion: imageregistry.operator.openshift.io/v1
kind: Config
metadata:
  finalizers:
  - imageregistry.operator.openshift.io/finalizer
  name: cluster
spec:
  defaultRoute: false
  httpSecret: {{ .ImageRegistryHTTPSecret }}
  logging: 2
  managementState: Managed
  proxy:
    http: ""
    https: ""
    noProxy: ""
  readOnly: false
  replicas: 1
  requests:
    read:
      maxInQueue: 0
      maxRunning: 0
      maxWaitInQueue: 0s
    write:
      maxInQueue: 0
      maxRunning: 0
      maxWaitInQueue: 0s
  storage:
    emptyDir: {}
`)

func registryClusterImageregistryConfigYamlBytes() ([]byte, error) {
	return _registryClusterImageregistryConfigYaml, nil
}

func registryClusterImageregistryConfigYaml() (*asset, error) {
	bytes, err := registryClusterImageregistryConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registry/cluster-imageregistry-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyClientConf = []byte(`client
verb 3
nobind
dev tun
remote-cert-tls server
remote openvpn-server 1194 tcp
ca secret/ca.crt
cert secret/tls.crt
key secret/tls.key
`)

func routerProxyClientConfBytes() ([]byte, error) {
	return _routerProxyClientConf, nil
}

func routerProxyClientConf() (*asset, error) {
	bytes, err := routerProxyClientConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/client.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyHaproxyCfg = []byte(`global
  maxconn 7000

defaults
  mode tcp
  timeout client 10m
  timeout server 10m
  timeout connect 10s
  timeout client-fin 5s
  timeout server-fin 5s
  timeout queue 5s
  retries 3

frontend local_router_http
  bind :8080
  default_backend remote_router_http

frontend local_router_https
  bind :8443
  default_backend remote_router_https

backend remote_router_http
  mode tcp
  server remote_http ${ROUTER_SERVICE_IP}:80

backend remote_router_https
  mode tcp
  server remote_https ${ROUTER_SERVICE_IP}:443
`)

func routerProxyHaproxyCfgBytes() ([]byte, error) {
	return _routerProxyHaproxyCfg, nil
}

func routerProxyHaproxyCfg() (*asset, error) {
	bytes, err := routerProxyHaproxyCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/haproxy.cfg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyRouterProxyConfigmapYaml = []byte(`kind: ConfigMap
apiVersion: v1
metadata:
  name: router-proxy-config
data:
  haproxy.cfg: |-
{{ include "router-proxy/haproxy.cfg" 4 }}
`)

func routerProxyRouterProxyConfigmapYamlBytes() ([]byte, error) {
	return _routerProxyRouterProxyConfigmapYaml, nil
}

func routerProxyRouterProxyConfigmapYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyRouterProxyDeploymentYaml = []byte(`kind: Deployment
apiVersion: apps/v1
metadata:
  name: router-proxy
  labels:
    app: router-proxy
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: router-proxy
  template:
    metadata:
      labels:
        app: router-proxy
    spec:
      initContainers:
      - name: service-ip
        image: {{ imageFor "cli" }}
        env:
        - name: KUBECONFIG
          value: /etc/openshift/kubeconfig
        command:
        - /bin/bash
        args:
        - -c
        - |-
          #!/bin/bash
          while ! oc get service -n openshift-ingress router-internal-default; do
            echo "Waiting for the internal default router to be available"
            sleep 30
          done
          export ROUTER_SERVICE_IP="$(oc get service -n openshift-ingress router-internal-default -o jsonpath='{ .spec.clusterIP }')"
          sed -e "s/\${ROUTER_SERVICE_IP}/${ROUTER_SERVICE_IP}/" /config-template/haproxy.cfg > /config/haproxy.cfg
        volumeMounts:
        - name: config-template
          mountPath: /config-template
        - name: config
          mountPath: /config
        - name: kubeconfig
          mountPath: /etc/openshift
      containers:
      - name: router-proxy
        image: {{ imageFor "haproxy-router" }}
        command:
        - haproxy
        args:
        - -f
        - /usr/local/etc/haproxy/haproxy.cfg
        ports:
        - containerPort: 8443
          name: https
        - containerPort: 8080
          name: http
        securityContext:
          runAsUser: 1001
          capabilities:
            drop:
            - MKNOD
            - NET_ADMIN
        volumeMounts:
        - name: config
          mountPath: /usr/local/etc/haproxy
      - name: openvpn-client
        image: quay.io/hypershift/openvpn:latest
        imagePullPolicy: Always
        command:
        - /usr/sbin/openvpn
        args:
        - --config
        - /etc/openvpn/config/client.conf
        workingDir: /etc/openvpn/
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/openvpn/secret
          name: vpnsecret
        - mountPath: /etc/openvpn/config
          name: vpnconfig
      serviceAccountName: vpn
      volumes:
      - name: config-template
        configMap:
          name: router-proxy-config
      - name: config
        emptyDir: {}
      - name: kubeconfig
        secret:
          secretName: service-network-admin-kubeconfig
      - configMap:
          name: router-proxy-vpnclient-config
        name: vpnconfig
      - secret:
          secretName: router-proxy-vpnclient-secret
        name: vpnsecret
`)

func routerProxyRouterProxyDeploymentYamlBytes() ([]byte, error) {
	return _routerProxyRouterProxyDeploymentYaml, nil
}

func routerProxyRouterProxyDeploymentYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyRouterProxyHttpServiceYaml = []byte(`kind: Service
apiVersion: v1
metadata:
  name: router-http
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: router-proxy
`)

func routerProxyRouterProxyHttpServiceYamlBytes() ([]byte, error) {
	return _routerProxyRouterProxyHttpServiceYaml, nil
}

func routerProxyRouterProxyHttpServiceYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyHttpServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-http-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyRouterProxyHttpsServiceYaml = []byte(`kind: Service
apiVersion: v1
metadata:
  name: router-https
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app: router-proxy
`)

func routerProxyRouterProxyHttpsServiceYamlBytes() ([]byte, error) {
	return _routerProxyRouterProxyHttpsServiceYaml, nil
}

func routerProxyRouterProxyHttpsServiceYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyHttpsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-https-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyRouterProxyVpnclientConfigmapYaml = []byte(`kind: ConfigMap
apiVersion: v1
metadata:
  name: router-proxy-vpnclient-config
data:
  client.conf: |-
{{ include "router-proxy/client.conf" 4 }}
`)

func routerProxyRouterProxyVpnclientConfigmapYamlBytes() ([]byte, error) {
	return _routerProxyRouterProxyVpnclientConfigmapYaml, nil
}

func routerProxyRouterProxyVpnclientConfigmapYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyVpnclientConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-vpnclient-configmap.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerProxyRouterProxyVpnclientSecretYaml = []byte(`kind: Secret
apiVersion: v1
metadata:
  name: router-proxy-vpnclient-secret
data:
  tls.crt: {{ pki "openvpn-router-proxy-client.crt" }}
  tls.key: {{ pki "openvpn-router-proxy-client.key" }}
  ca.crt: {{ pki "openvpn-ca.crt" }}
`)

func routerProxyRouterProxyVpnclientSecretYamlBytes() ([]byte, error) {
	return _routerProxyRouterProxyVpnclientSecretYaml, nil
}

func routerProxyRouterProxyVpnclientSecretYaml() (*asset, error) {
	bytes, err := routerProxyRouterProxyVpnclientSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router-proxy/router-proxy-vpnclient-secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userManifestsBootstrapperUserManifestTemplateYaml = []byte(`kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .name }}
data:
  data: |-
{{ includeData .data 4 }}
`)

func userManifestsBootstrapperUserManifestTemplateYamlBytes() ([]byte, error) {
	return _userManifestsBootstrapperUserManifestTemplateYaml, nil
}

func userManifestsBootstrapperUserManifestTemplateYaml() (*asset, error) {
	bytes, err := userManifestsBootstrapperUserManifestTemplateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user-manifests-bootstrapper/user-manifest-template.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userManifestsBootstrapperUserManifestsBootstrapperPodYaml = []byte(`---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-manifests-bootstrapper
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-manifests-bootstrapper
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
  - kind: ServiceAccount
    name: user-manifests-bootstrapper
---
apiVersion: v1
kind: Pod
metadata:
  name: manifests-bootstrapper
spec:
  tolerations:
    - key: "multi-az-worker"
      operator: "Equal"
      value: "true"
      effect: NoSchedule
  initContainers:
    - image: {{ .ReleaseImage }}
      imagePullPolicy: IfNotPresent
      name: cluster-version-operator
      workingDir: /tmp
      command:
        - /bin/bash
      args:
        - -c
        - |-
          cd /tmp
          mkdir output
          /usr/bin/cluster-version-operator render --output-dir /tmp/output --release-image {{ .ReleaseImage }}
          # Exclude the CVO deployment manifest
          rm /tmp/output/manifests/0000_00_cluster-version-operator*deployment.yaml
          cp /tmp/output/manifests/* /work
      volumeMounts:
        - mountPath: /work
          name: work
    - image: {{ imageFor "cluster-config-operator" }}
      imagePullPolicy: IfNotPresent
      name: config-operator
      workingDir: /tmp
      command:
        - /bin/bash
      args:
        - -c
        - |-
          cd /tmp
          mkdir input output
          /usr/bin/cluster-config-operator render --config-output-file config --asset-input-dir /tmp/input --asset-output-dir /tmp/output
          cp /tmp/output/manifests/* /work
      volumeMounts:
        - mountPath: /work
          name: work
  containers:
    - image: {{ imageFor "cli" }}
      imagePullPolicy: IfNotPresent
      name: bootstrapper
      workingDir: /work
      command:
        - /bin/bash
      args:
        - -c
        - |-
          #!/bin/bash
          set -eu
          for name in $(oc get cm | grep '^user-manifest-' | awk '{ print $1 }'); do
             oc get cm ${name} -o jsonpath='{ .data.data }' > "${name}.yaml"
          done
          export KUBECONFIG=/etc/openshift/kubeconfig
          oc apply -f $(pwd)
          # Replace the global certs configmap here because it's too large to oc apply
          oc create configmap -n openshift-controller-manager openshift-global-ca --from-file ca-bundle.crt=/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem --dry-run -o yaml > /tmp/openshift-global-ca
          oc replace -n openshift-controller-manager -f /tmp/openshift-global-ca --force
      volumeMounts:
        - mountPath: /etc/openshift
          name: kubeconfig
          readOnly: true
        - mountPath: /work
          name: work
  restartPolicy: OnFailure
  serviceAccountName: user-manifests-bootstrapper
  volumes:
    - name: kubeconfig
      secret:
        secretName: service-network-admin-kubeconfig
    - name: work
      emptyDir: {}
`)

func userManifestsBootstrapperUserManifestsBootstrapperPodYamlBytes() ([]byte, error) {
	return _userManifestsBootstrapperUserManifestsBootstrapperPodYaml, nil
}

func userManifestsBootstrapperUserManifestsBootstrapperPodYaml() (*asset, error) {
	bytes, err := userManifestsBootstrapperUserManifestsBootstrapperPodYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apiserver-haproxy/apiserver-ip.service":                                             apiserverHaproxyApiserverIpService,
	"apiserver-haproxy/haproxy.cfg":                                                      apiserverHaproxyHaproxyCfg,
	"apiserver-haproxy/kube-apiserver-proxy.yaml":                                        apiserverHaproxyKubeApiserverProxyYaml,
	"apiserver-haproxy/setup-apiserver-ip.sh":                                            apiserverHaproxySetupApiserverIpSh,
	"apiserver-haproxy/teardown-apiserver-ip.sh":                                         apiserverHaproxyTeardownApiserverIpSh,
	"cluster-bootstrap/cluster-ingresscontrollers-02-config.yaml":                        clusterBootstrapClusterIngresscontrollers02ConfigYaml,
	"cluster-bootstrap/namespace-security-allocation-controller-clusterrole.yaml":        clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYaml,
	"cluster-bootstrap/namespace-security-allocation-controller-clusterrolebinding.yaml": clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYaml,
	"common/service-network-admin-kubeconfig-secret.yaml":                                commonServiceNetworkAdminKubeconfigSecretYaml,
	"control-plane-operator/cp-operator-configmap.yaml":                                  controlPlaneOperatorCpOperatorConfigmapYaml,
	"etcd/etcd-cluster-crd.yaml":                                                         etcdEtcdClusterCrdYaml,
	"etcd/etcd-cluster.yaml":                                                             etcdEtcdClusterYaml,
	"etcd/etcd-operator-cluster-role-binding.yaml":                                       etcdEtcdOperatorClusterRoleBindingYaml,
	"etcd/etcd-operator-cluster-role.yaml":                                               etcdEtcdOperatorClusterRoleYaml,
	"etcd/etcd-operator.yaml":                                                            etcdEtcdOperatorYaml,
	"etcd/etcd-secret-template.yaml":                                                     etcdEtcdSecretTemplateYaml,
	"hypershift-operator/hypershift-operator-configmap.yaml":                             hypershiftOperatorHypershiftOperatorConfigmapYaml,
	"hypershift-operator/hypershift-operator-deployment.yaml":                            hypershiftOperatorHypershiftOperatorDeploymentYaml,
	"ignition-configs/20-apiserver-haproxy.yaml":                                         ignitionConfigs20ApiserverHaproxyYaml,
	"ignition-configs/99-worker-ssh.yaml":                                                ignitionConfigs99WorkerSshYaml,
	"ignition-deployment.yaml":                                                           ignitionDeploymentYaml,
	"ignition-route.yaml":                                                                ignitionRouteYaml,
	"ignition-service.yaml":                                                              ignitionServiceYaml,
	"konnectivity-server/konnectivity-agent-daemonset.yaml":                              konnectivityServerKonnectivityAgentDaemonsetYaml,
	"konnectivity-server/konnectivity-agent-rbac.yaml":                                   konnectivityServerKonnectivityAgentRbacYaml,
	"konnectivity-server/konnectivity-agent-sa.yaml":                                     konnectivityServerKonnectivityAgentSaYaml,
	"konnectivity-server/konnectivity-server-configmap.yaml":                             konnectivityServerKonnectivityServerConfigmapYaml,
	"konnectivity-server/konnectivity-server-deployment.yaml":                            konnectivityServerKonnectivityServerDeploymentYaml,
	"konnectivity-server/konnectivity-server-local-service.yaml":                         konnectivityServerKonnectivityServerLocalServiceYaml,
	"konnectivity-server/konnectivity-server-secret.yaml":                                konnectivityServerKonnectivityServerSecretYaml,
	"kube-apiserver/client.conf":                                                         kubeApiserverClientConf,
	"kube-apiserver/kube-apiserver-configmap.yaml":                                       kubeApiserverKubeApiserverConfigmapYaml,
	"kube-apiserver/kube-apiserver-deployment-patch.yaml":                                kubeApiserverKubeApiserverDeploymentPatchYaml,
	"kube-apiserver/kube-apiserver-secret.yaml":                                          kubeApiserverKubeApiserverSecretYaml,
	"kube-apiserver/kube-apiserver-vpnclient-config.yaml":                                kubeApiserverKubeApiserverVpnclientConfigYaml,
	"kube-apiserver/kube-apiserver-vpnclient-secret.yaml":                                kubeApiserverKubeApiserverVpnclientSecretYaml,
	"kube-controller-manager/kube-controller-manager-configmap.yaml":                     kubeControllerManagerKubeControllerManagerConfigmapYaml,
	"kube-controller-manager/kube-controller-manager-secret.yaml":                        kubeControllerManagerKubeControllerManagerSecretYaml,
	"kube-scheduler/kube-scheduler-secret.yaml":                                          kubeSchedulerKubeSchedulerSecretYaml,
	"machine-config-server/cluster-infrastructure-02-config.yaml":                        machineConfigServerClusterInfrastructure02ConfigYaml,
	"machine-config-server/cluster-network-02-config.yaml":                               machineConfigServerClusterNetwork02ConfigYaml,
	"machine-config-server/cluster-proxy-01-config.yaml":                                 machineConfigServerClusterProxy01ConfigYaml,
	"machine-config-server/install-config.yaml":                                          machineConfigServerInstallConfigYaml,
	"machine-config-server/machine-config-server-configmap.yaml":                         machineConfigServerMachineConfigServerConfigmapYaml,
	"machine-config-server/machine-config-server-deployment.yaml":                        machineConfigServerMachineConfigServerDeploymentYaml,
	"machine-config-server/machine-config-server-kubeconfig-secret.yaml":                 machineConfigServerMachineConfigServerKubeconfigSecretYaml,
	"machine-config-server/machine-config-server-route.yaml":                             machineConfigServerMachineConfigServerRouteYaml,
	"machine-config-server/machine-config-server-secret.yaml":                            machineConfigServerMachineConfigServerSecretYaml,
	"machine-config-server/machine-config-server-service.yaml":                           machineConfigServerMachineConfigServerServiceYaml,
	"machine-config-server/master.machineconfigpool.yaml":                                machineConfigServerMasterMachineconfigpoolYaml,
	"machine-config-server/pull-secret.yaml":                                             machineConfigServerPullSecretYaml,
	"machine-config-server/worker.machineconfigpool.yaml":                                machineConfigServerWorkerMachineconfigpoolYaml,
	"oauth-openshift/ingress-certs-secret.yaml":                                          oauthOpenshiftIngressCertsSecretYaml,
	"oauth-openshift/oauth-server-configmap.yaml":                                        oauthOpenshiftOauthServerConfigmapYaml,
	"oauth-openshift/oauth-server-secret.yaml":                                           oauthOpenshiftOauthServerSecretYaml,
	"openshift-apiserver/openshift-apiserver-configmap.yaml":                             openshiftApiserverOpenshiftApiserverConfigmapYaml,
	"openshift-apiserver/openshift-apiserver-secret.yaml":                                openshiftApiserverOpenshiftApiserverSecretYaml,
	"openshift-controller-manager/openshift-controller-manager-configmap.yaml":           openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml,
	"openshift-controller-manager/openshift-controller-manager-secret.yaml":              openshiftControllerManagerOpenshiftControllerManagerSecretYaml,
	"openvpn/Dockerfile":                                                                 openvpnDockerfile,
	"openvpn/client.conf":                                                                openvpnClientConf,
	"openvpn/openvpn-ccd-configmap.yaml":                                                 openvpnOpenvpnCcdConfigmapYaml,
	"openvpn/openvpn-client-configmap.yaml":                                              openvpnOpenvpnClientConfigmapYaml,
	"openvpn/openvpn-client-deployment.yaml":                                             openvpnOpenvpnClientDeploymentYaml,
	"openvpn/openvpn-client-secret.yaml":                                                 openvpnOpenvpnClientSecretYaml,
	"openvpn/openvpn-server-configmap.yaml":                                              openvpnOpenvpnServerConfigmapYaml,
	"openvpn/openvpn-server-deployment.yaml":                                             openvpnOpenvpnServerDeploymentYaml,
	"openvpn/openvpn-server-secret.yaml":                                                 openvpnOpenvpnServerSecretYaml,
	"openvpn/openvpn-server-service.yaml":                                                openvpnOpenvpnServerServiceYaml,
	"openvpn/openvpn-serviceaccount.yaml":                                                openvpnOpenvpnServiceaccountYaml,
	"openvpn/server.conf":                                                                openvpnServerConf,
	"openvpn/worker":                                                                     openvpnWorker,
	"registry/cluster-imageregistry-config.yaml":                                         registryClusterImageregistryConfigYaml,
	"router-proxy/client.conf":                                                           routerProxyClientConf,
	"router-proxy/haproxy.cfg":                                                           routerProxyHaproxyCfg,
	"router-proxy/router-proxy-configmap.yaml":                                           routerProxyRouterProxyConfigmapYaml,
	"router-proxy/router-proxy-deployment.yaml":                                          routerProxyRouterProxyDeploymentYaml,
	"router-proxy/router-proxy-http-service.yaml":                                        routerProxyRouterProxyHttpServiceYaml,
	"router-proxy/router-proxy-https-service.yaml":                                       routerProxyRouterProxyHttpsServiceYaml,
	"router-proxy/router-proxy-vpnclient-configmap.yaml":                                 routerProxyRouterProxyVpnclientConfigmapYaml,
	"router-proxy/router-proxy-vpnclient-secret.yaml":                                    routerProxyRouterProxyVpnclientSecretYaml,
	"user-manifests-bootstrapper/user-manifest-template.yaml":                            userManifestsBootstrapperUserManifestTemplateYaml,
	"user-manifests-bootstrapper/user-manifests-bootstrapper-pod.yaml":                   userManifestsBootstrapperUserManifestsBootstrapperPodYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apiserver-haproxy": {nil, map[string]*bintree{
		"apiserver-ip.service":      {apiserverHaproxyApiserverIpService, map[string]*bintree{}},
		"haproxy.cfg":               {apiserverHaproxyHaproxyCfg, map[string]*bintree{}},
		"kube-apiserver-proxy.yaml": {apiserverHaproxyKubeApiserverProxyYaml, map[string]*bintree{}},
		"setup-apiserver-ip.sh":     {apiserverHaproxySetupApiserverIpSh, map[string]*bintree{}},
		"teardown-apiserver-ip.sh":  {apiserverHaproxyTeardownApiserverIpSh, map[string]*bintree{}},
	}},
	"cluster-bootstrap": {nil, map[string]*bintree{
		"cluster-ingresscontrollers-02-config.yaml":                        {clusterBootstrapClusterIngresscontrollers02ConfigYaml, map[string]*bintree{}},
		"namespace-security-allocation-controller-clusterrole.yaml":        {clusterBootstrapNamespaceSecurityAllocationControllerClusterroleYaml, map[string]*bintree{}},
		"namespace-security-allocation-controller-clusterrolebinding.yaml": {clusterBootstrapNamespaceSecurityAllocationControllerClusterrolebindingYaml, map[string]*bintree{}},
	}},
	"common": {nil, map[string]*bintree{
		"service-network-admin-kubeconfig-secret.yaml": {commonServiceNetworkAdminKubeconfigSecretYaml, map[string]*bintree{}},
	}},
	"control-plane-operator": {nil, map[string]*bintree{
		"cp-operator-configmap.yaml": {controlPlaneOperatorCpOperatorConfigmapYaml, map[string]*bintree{}},
	}},
	"etcd": {nil, map[string]*bintree{
		"etcd-cluster-crd.yaml":                   {etcdEtcdClusterCrdYaml, map[string]*bintree{}},
		"etcd-cluster.yaml":                       {etcdEtcdClusterYaml, map[string]*bintree{}},
		"etcd-operator-cluster-role-binding.yaml": {etcdEtcdOperatorClusterRoleBindingYaml, map[string]*bintree{}},
		"etcd-operator-cluster-role.yaml":         {etcdEtcdOperatorClusterRoleYaml, map[string]*bintree{}},
		"etcd-operator.yaml":                      {etcdEtcdOperatorYaml, map[string]*bintree{}},
		"etcd-secret-template.yaml":               {etcdEtcdSecretTemplateYaml, map[string]*bintree{}},
	}},
	"hypershift-operator": {nil, map[string]*bintree{
		"hypershift-operator-configmap.yaml":  {hypershiftOperatorHypershiftOperatorConfigmapYaml, map[string]*bintree{}},
		"hypershift-operator-deployment.yaml": {hypershiftOperatorHypershiftOperatorDeploymentYaml, map[string]*bintree{}},
	}},
	"ignition-configs": {nil, map[string]*bintree{
		"20-apiserver-haproxy.yaml": {ignitionConfigs20ApiserverHaproxyYaml, map[string]*bintree{}},
		"99-worker-ssh.yaml":        {ignitionConfigs99WorkerSshYaml, map[string]*bintree{}},
	}},
	"ignition-deployment.yaml": {ignitionDeploymentYaml, map[string]*bintree{}},
	"ignition-route.yaml":      {ignitionRouteYaml, map[string]*bintree{}},
	"ignition-service.yaml":    {ignitionServiceYaml, map[string]*bintree{}},
	"konnectivity-server": {nil, map[string]*bintree{
		"konnectivity-agent-daemonset.yaml":      {konnectivityServerKonnectivityAgentDaemonsetYaml, map[string]*bintree{}},
		"konnectivity-agent-rbac.yaml":           {konnectivityServerKonnectivityAgentRbacYaml, map[string]*bintree{}},
		"konnectivity-agent-sa.yaml":             {konnectivityServerKonnectivityAgentSaYaml, map[string]*bintree{}},
		"konnectivity-server-configmap.yaml":     {konnectivityServerKonnectivityServerConfigmapYaml, map[string]*bintree{}},
		"konnectivity-server-deployment.yaml":    {konnectivityServerKonnectivityServerDeploymentYaml, map[string]*bintree{}},
		"konnectivity-server-local-service.yaml": {konnectivityServerKonnectivityServerLocalServiceYaml, map[string]*bintree{}},
		"konnectivity-server-secret.yaml":        {konnectivityServerKonnectivityServerSecretYaml, map[string]*bintree{}},
	}},
	"kube-apiserver": {nil, map[string]*bintree{
		"client.conf":                          {kubeApiserverClientConf, map[string]*bintree{}},
		"kube-apiserver-configmap.yaml":        {kubeApiserverKubeApiserverConfigmapYaml, map[string]*bintree{}},
		"kube-apiserver-deployment-patch.yaml": {kubeApiserverKubeApiserverDeploymentPatchYaml, map[string]*bintree{}},
		"kube-apiserver-secret.yaml":           {kubeApiserverKubeApiserverSecretYaml, map[string]*bintree{}},
		"kube-apiserver-vpnclient-config.yaml": {kubeApiserverKubeApiserverVpnclientConfigYaml, map[string]*bintree{}},
		"kube-apiserver-vpnclient-secret.yaml": {kubeApiserverKubeApiserverVpnclientSecretYaml, map[string]*bintree{}},
	}},
	"kube-controller-manager": {nil, map[string]*bintree{
		"kube-controller-manager-configmap.yaml": {kubeControllerManagerKubeControllerManagerConfigmapYaml, map[string]*bintree{}},
		"kube-controller-manager-secret.yaml":    {kubeControllerManagerKubeControllerManagerSecretYaml, map[string]*bintree{}},
	}},
	"kube-scheduler": {nil, map[string]*bintree{
		"kube-scheduler-secret.yaml": {kubeSchedulerKubeSchedulerSecretYaml, map[string]*bintree{}},
	}},
	"machine-config-server": {nil, map[string]*bintree{
		"cluster-infrastructure-02-config.yaml":        {machineConfigServerClusterInfrastructure02ConfigYaml, map[string]*bintree{}},
		"cluster-network-02-config.yaml":               {machineConfigServerClusterNetwork02ConfigYaml, map[string]*bintree{}},
		"cluster-proxy-01-config.yaml":                 {machineConfigServerClusterProxy01ConfigYaml, map[string]*bintree{}},
		"install-config.yaml":                          {machineConfigServerInstallConfigYaml, map[string]*bintree{}},
		"machine-config-server-configmap.yaml":         {machineConfigServerMachineConfigServerConfigmapYaml, map[string]*bintree{}},
		"machine-config-server-deployment.yaml":        {machineConfigServerMachineConfigServerDeploymentYaml, map[string]*bintree{}},
		"machine-config-server-kubeconfig-secret.yaml": {machineConfigServerMachineConfigServerKubeconfigSecretYaml, map[string]*bintree{}},
		"machine-config-server-route.yaml":             {machineConfigServerMachineConfigServerRouteYaml, map[string]*bintree{}},
		"machine-config-server-secret.yaml":            {machineConfigServerMachineConfigServerSecretYaml, map[string]*bintree{}},
		"machine-config-server-service.yaml":           {machineConfigServerMachineConfigServerServiceYaml, map[string]*bintree{}},
		"master.machineconfigpool.yaml":                {machineConfigServerMasterMachineconfigpoolYaml, map[string]*bintree{}},
		"pull-secret.yaml":                             {machineConfigServerPullSecretYaml, map[string]*bintree{}},
		"worker.machineconfigpool.yaml":                {machineConfigServerWorkerMachineconfigpoolYaml, map[string]*bintree{}},
	}},
	"oauth-openshift": {nil, map[string]*bintree{
		"ingress-certs-secret.yaml":   {oauthOpenshiftIngressCertsSecretYaml, map[string]*bintree{}},
		"oauth-server-configmap.yaml": {oauthOpenshiftOauthServerConfigmapYaml, map[string]*bintree{}},
		"oauth-server-secret.yaml":    {oauthOpenshiftOauthServerSecretYaml, map[string]*bintree{}},
	}},
	"openshift-apiserver": {nil, map[string]*bintree{
		"openshift-apiserver-configmap.yaml": {openshiftApiserverOpenshiftApiserverConfigmapYaml, map[string]*bintree{}},
		"openshift-apiserver-secret.yaml":    {openshiftApiserverOpenshiftApiserverSecretYaml, map[string]*bintree{}},
	}},
	"openshift-controller-manager": {nil, map[string]*bintree{
		"openshift-controller-manager-configmap.yaml": {openshiftControllerManagerOpenshiftControllerManagerConfigmapYaml, map[string]*bintree{}},
		"openshift-controller-manager-secret.yaml":    {openshiftControllerManagerOpenshiftControllerManagerSecretYaml, map[string]*bintree{}},
	}},
	"openvpn": {nil, map[string]*bintree{
		"Dockerfile":                     {openvpnDockerfile, map[string]*bintree{}},
		"client.conf":                    {openvpnClientConf, map[string]*bintree{}},
		"openvpn-ccd-configmap.yaml":     {openvpnOpenvpnCcdConfigmapYaml, map[string]*bintree{}},
		"openvpn-client-configmap.yaml":  {openvpnOpenvpnClientConfigmapYaml, map[string]*bintree{}},
		"openvpn-client-deployment.yaml": {openvpnOpenvpnClientDeploymentYaml, map[string]*bintree{}},
		"openvpn-client-secret.yaml":     {openvpnOpenvpnClientSecretYaml, map[string]*bintree{}},
		"openvpn-server-configmap.yaml":  {openvpnOpenvpnServerConfigmapYaml, map[string]*bintree{}},
		"openvpn-server-deployment.yaml": {openvpnOpenvpnServerDeploymentYaml, map[string]*bintree{}},
		"openvpn-server-secret.yaml":     {openvpnOpenvpnServerSecretYaml, map[string]*bintree{}},
		"openvpn-server-service.yaml":    {openvpnOpenvpnServerServiceYaml, map[string]*bintree{}},
		"openvpn-serviceaccount.yaml":    {openvpnOpenvpnServiceaccountYaml, map[string]*bintree{}},
		"server.conf":                    {openvpnServerConf, map[string]*bintree{}},
		"worker":                         {openvpnWorker, map[string]*bintree{}},
	}},
	"registry": {nil, map[string]*bintree{
		"cluster-imageregistry-config.yaml": {registryClusterImageregistryConfigYaml, map[string]*bintree{}},
	}},
	"router-proxy": {nil, map[string]*bintree{
		"client.conf":                           {routerProxyClientConf, map[string]*bintree{}},
		"haproxy.cfg":                           {routerProxyHaproxyCfg, map[string]*bintree{}},
		"router-proxy-configmap.yaml":           {routerProxyRouterProxyConfigmapYaml, map[string]*bintree{}},
		"router-proxy-deployment.yaml":          {routerProxyRouterProxyDeploymentYaml, map[string]*bintree{}},
		"router-proxy-http-service.yaml":        {routerProxyRouterProxyHttpServiceYaml, map[string]*bintree{}},
		"router-proxy-https-service.yaml":       {routerProxyRouterProxyHttpsServiceYaml, map[string]*bintree{}},
		"router-proxy-vpnclient-configmap.yaml": {routerProxyRouterProxyVpnclientConfigmapYaml, map[string]*bintree{}},
		"router-proxy-vpnclient-secret.yaml":    {routerProxyRouterProxyVpnclientSecretYaml, map[string]*bintree{}},
	}},
	"user-manifests-bootstrapper": {nil, map[string]*bintree{
		"user-manifest-template.yaml":          {userManifestsBootstrapperUserManifestTemplateYaml, map[string]*bintree{}},
		"user-manifests-bootstrapper-pod.yaml": {userManifestsBootstrapperUserManifestsBootstrapperPodYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
